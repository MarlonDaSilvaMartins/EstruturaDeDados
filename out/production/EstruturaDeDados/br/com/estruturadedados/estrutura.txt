lista    // estrutura de dados do qual um conjunto de dados é acessivel em uma sequencia determinada
            receber dados do banco, lista de um carinho de compras

fila     // estrutura de dados linear do qual o primeiro resultado a entrar é o primeiro a sair(FIFO)
            remoção: remove do topo
            inserção: insere no fim
            pedidos, sistema de fila, caminhoes esperando pela descarga

pilha    // estrutura de dados em que o acesso é restrito ao elemento mais recente da pilha(LIFO),
            push: inserir no topo
            pop: retirar do topo
            top: observar topo
            Mecanismo de fazer/desfazer de editor de texto, navegação entre paginas web

HashCode // método que retorna um código hash de um objeto.
hash     // dado real aplicando uma formula para descobrir qual é o numero que o dado corresponde

equals   // garante que dois objetos sao significativamente iguais, que tenham um valor igual de acordo com suas


            List = coleção ordenada que pode conter valores repetidos

            Set  = colecao que nao pode conter valores duplicados

            map  = relação chave valor

list  // interface que representa grupos ordenados e permite valores duplicados
queue // interface que especifica o necessario para implementar uma fila
set   // interface representa grupos de elementos sem duplicatas
map   // interface que permite trabalhar com uma estrutura de chave e valor

ArrayList  // classe faz a implementação de um array redimensionavel
LinkedList // classe que implementa uma estrutura de dados tipo lista encadeada
 * preencher   = LinkedList = 196ms | ArrayList = 228ms
 * buscar      = LinkedList = 40ms  | ArrayList = 27ms
 * inicio      = LinkedList = 12ms  | ArrayList = 33ms
 * meio        = LinkedList = 11ms  | ArrayList = 3ms
 * fim         = LinkedList = 12ms  | ArrayList = 0ms
 * remover     = LinkedList = 3ms   | ArrayList = 4ms
 * rem. meio   = LinkedList = 1ms   | ArrayList = 2ms
 * duplicado   = Linkedlist = Permite valores duplicados pois cada valor é guardado em um nodo diferente
                 Arraylist  = Permite valores duplicados pois guarda o objeto da maneira que sao inseridos
 * tam inicial = Linkedlist = sem tamanho inicial | Arraylist = 10 se nao for especificado outro valor na inicializacao
 * tam maximo  = Linkedlist = sem limite | Arraylist = sem limite, quando chega no maximo(10) se expande automaticamente dobrando de tamanho

LinkedHashSet // faz a utilizacao de hashtable e linkedlist, os elementos continuam na ordem que sao inseridos
HashSet       // classe que implementa o set, utilizando uma hashtable e seus elementos nao sao ordenados
TreeSet       // implementa um algoritmo conhecido por red-black tree, insere sempre ordenados
 * preencher   = LinkedHashSet = 698ms | HashSet = 774ms | TreeSet = 1073ms
 * buscar      = LinkedHashSet = 45ms  | HashSet = 114ms | TreeSet = 88ms
 * inicio      = LinkedHashSet = ?ms   | HashSet = ?ms   | TreeSet = 1ms
 * meio        = LinkedHashSet = ?ms   | HashSet = ?ms   | TreeSet = 1ms
 * fim         = LinkedHashSet = 1ms   | HashSet = 1ms   | TreeSet = 1ms
 * remover     = LinkedHashSet = 5ms   | HashSet = 5ms  | TreeSet = 1ms
 * rem. meio   = LinkedHashSet = 31ms  | HashSet = 43ms  | TreeSet = 26ms
 * duplicado   = LinkedHashSet = nao permite | HashSet = nao permite | TreeSet = nao permite
 * ordenacao   = LinkedHashSet = ordem de inserção
                 HashSet = nao mantem ordem
                 TreeSet = ordem ascendente ou ordem do camparador
 * tam inicial = LinkedHashSet = 16 | HashSet = 16 | TreeSet = 16
 * tam maximo  = LinkedHashSet = sem limite | HashSet = sem limite* | TreeSet = sem limite
                 * relativamente ineficiente a partir de 100 milhoes de elemento devido a distribuicao de 32bits do
                 hashcode que comeca a ficar menos aleatorio e aumentando o numero de colisoes

HashMap       // cada elemento da lista possui uma chave e um valor associado
LinkedHashMap // similar ao hashmap, porem guarda os elementos na ordem que sao inseridos
TreeMap       // ordena os elementos de maneira natural de conforme o metodo compareTo no momento da inserção
 * preencher   = HashMap = 403ms | LinkedHashMap = 481ms | TreeMap = 748ms
 * buscar      = HashMap = 20ms  | LinkedHashMap = 29ms  | TreeMap = 47ms
 * inicio      = HashMap = ?ms   | LinkedHashMap = ?ms   | TreeMap = 1ms
 * meio        = HashMap = ?ms   | LinkedHashMap = ?ms   | TreeMap = 1ms
 * fim         = HashMap = 1ms   | LinkedHashMap = 0ms   | TreeMap = 0ms
 * remover     = HashMap = 5ms   | LinkedHashMap = 15ms  | TreeMap = 0ms
 * rem. meio   = HashMap = 0ms   | LinkedHashMap = 0ms   | TreeMap = 0ms
 * duplicado   = LinkedHashMap = nao contem chaves duplicadas
                 HashMap = nao contem chaves duplicadas
                 TreeMap = nao contem chaves duplicadas
 * ordenacao   = LinkedHashMap = ordem de inserção
                 HashMap = nao mantem ordem
                 TreeMap = ordem ascendente ou ordem do camparador
 * tam inicial = LinkedHashMap = 16 | HashMap = 16 | TreeMap = 16
 * tam maximo  = LinkedHashMap = sem limite | HashMap = sem limite | TreeMap = sem limite

 * Interfaces Funcionais = Interface com apenas um metodo abstrato
        Function  = recebe um argumento e retorna um resultado
        Consumer  = recebe um argumento e tem um retorno void
        Supplier  = nao aceita argumentos e retorna um resultado
        Predicate = recebe um argumento e tem um retorno boolean
 * Lambda    = bloco curto de codigo que tem parametros e retorna um valor
 * Generics  = extensao que fornece em tempo de compilacao uma verificacao de type-safety de codigo
 * Wildcards = utilizacao de <?> para remover a incompatibilidade entre diferentes instanciacoes de tipo genericos
 * Optional  = encapsular o retorno de metodos e informar se um valor esta presente ou ausente
 * Streams   = solução para processar coleções de maneira declarativa
 * API DE DATAS = LocalDate = Capturar data e hora do sistema ou inserir data por meio de metodos
                  DateTimeFormatter = API utilizada para formatar datas

 Protocolo HTTP // HyperText Transfer Protocol = protocolo que permite troca de recursos,
                   como documentos HTML. é a base de qualquer troca de dados na Web.
 * Request methods = responsavel por indicar a a açao a ser executada para um recurso
       -GET     = solicita a representacao de um recurso especifico, deve retornar apenas dados
       -HEAD    = solicita uma resposta de forma identica ao metodo get, mas sem o corpo da resposta
       -POST    = submeter uma entidade a um recurso especifico, causando mudanca no estado do recurso ou efeitos colaterais no servidor
       -PUT     = substitui as atuais representacoes do recurso de destino pela carga de dados da requisicao
       -DELETE  = remove um recurso
       CONNECT  = estabeleca uma conexao para o servidor identificado pelo recurso de destino
       -OPTIONS = quer pegar informacoes para saber se certa açao funciona
       TRACE    = retorna as informacoes que chegaram ao servidor
       -PATCH   = utilizado para aplicar modificacoes parciais em um recurso
 * Header          = permite que o cliente e o servidor passem informaçoes adicionais com a
                     solicitaçao ou resposta do HTTP
 * Body            = onde fica os dados enviados ou recebidos do servidor, nem todas requisiçoes tem
                     um body(GET,HEAD,DELETE e OPTIONS)
 * Path Variable   = quando passa o valor pela URL, mas como um caminho
                /usuarios/123
 * Query Param     = quando passa o valor pela URL, mas como um parametro
                /usuarios?id=123
        1xx = Informação       =
        2xx = Sucesso          =
        3xx = Redirecionamento = endereço antigo aponta para o endereço novo
        4xx = Erro no cliente  = parametros invalidos, insuficientes ou endereço que nao tem nenhuma pagina
        5xx = Erro no servidor = banco de dados fora do ar ou erro de codigo do lado do servidor
**Cookies = fragmento de dados que o servidor envia para o navegador, o navegador pode armazenar estes dados e enviar de volta na proxima requisição
        Gerenciamento de sessao = login, carrinho de compras, placar de jogos ou qualquer atividade que deva ser guardada
        Personalização          = preferencias de usuarios, temas e outras configuraçoes
        ratreamento             = registro e analise do comportamento de um usuario
  Set-Cookie: <cookie-name>=<cookie-value>

Try Catch = utilizado para tratar exceçoes


Correção = pode utilizar metodos concretos em uma interface utilizando o default


